from log.Logger import Logger


class AbstractTool(object):
    """
    This is a abstract class to represent a tool.

    """

    def __init__(self, tool_name=None, path_for_log_file='tmp/', parameters=None):
        """
        Class constructor

        @param tool_name: tool name for debugging purposes
        @@type tool_name: string
        @param path_for_log_file: path to save the logs generated by the tool.
        @@type path_for_log_file: string
        """
        self.tool_name = tool_name
        self.log = Logger(tool_name, path_for_log_file)

    def execute_agent(self, agent):
        """
        Executes the main method of the tool on a agent.

        @param agent: the agent the method should be executed on.
        @@type agent: class Agent
        """
        raise NotImplementedError(
            "This method is abstract and must be implemented in derived classes.")

    def execute_model(self, model):
        """
        Executes the main method of the tool on a single model.

        @param model: the model the method should be executed on.
        @@type model: class derived from tools.AbstractModel class
        """
        raise NotImplementedError(
            "This method is abstract and must be implemented in derived classes.")
